version: 2

references:
    container_config: &container_config
        docker:
            - image: circleci/python:3.6-stretch
              environment:
                  DATABASE_URL: postgres://postgres:postgres@127.0.0.1:5432/app

            - image: circleci/postgres:10
              environment:
                  POSTGRES_USER: postgres
                  POSTGRES_PASSWORD: postgres
                  POSTGRES_DB: app
    create-aws-credentials: &create-aws-credentials
        run:
          name: Create AWS credentials manually
          command: |
              mkdir ~/.aws
              touch ~/.aws/config
              chmod 600 ~/.aws/config
              echo "[profile covidapp]" > ~/.aws/config
              echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/config
              echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/config

    install-aws-cli: &install-aws-cli
        run:
          name: Installing awsebcli
          command: |
                sudo pip install --upgrade setuptools awscli
                sudo apt-get install jq
                curl https://raw.githubusercontent.com/silinternational/ecs-deploy/master/ecs-deploy | sudo tee /usr/bin/ecs-deploy
                sudo chmod +x /usr/bin/ecs-deploy

    install_python_requirements: &install_python_requirements
        run:
            name: Install python requirements
            command: |
                python3 -m venv venv
                sudo pip install -r requirements/base.txt
                sudo pip install -r requirements/test.txt

    restore_repo: &restore_repo
        restore_cache:
            keys:
                - v1-repo-{{ .Branch }}-{{ .Revision }}
    run_code_formatter: &run_code_formatter
        run:
            command: |
              python3 -m venv venv
              . venv/bin/activate
              sudo pip install -r requirements/dev.txt
              black --check src/

    run_tests: &run_tests
        run:
          name: Running tests with coverage
          command: |
              python src/manage.py collectstatic --no-input
              coverage erase
              pytest -n 4

    install_heroku_cli: &install_heroku_cli
        run:
          name: Install Heroku-CLI
          command: |
              wget https://cli-assets.heroku.com/branches/stable/heroku-linux-amd64.tar.gz
              sudo mkdir -p /usr/local/lib /usr/local/bin
              sudo tar -xvzf heroku-linux-amd64.tar.gz -C /usr/local/lib
              sudo ln -s /usr/local/lib/heroku/bin/heroku /usr/local/bin/heroku

    deploy_heroku_staging: &deploy_heroku_staging
        run:
          name: Deploy
          command: |
              bash .circleci/setup-heroku.sh
              git push git@heroku.com:$HEROKU_APP_NAME_STAGING.git $CIRCLE_SHA1:refs/heads/master
              heroku run python src/manage.py migrate --noinput --app $HEROKU_APP_NAME_STAGING

    build-push-deploy-staging: &build-push-deploy-staging
        run:
          name: Build, Push and Deploy Staging
          command: |
              eval $(aws ecr get-login --region us-west-2 | sed 's|https://||' | sed 's|-e none ||')
              docker build -t covidapp-staging .
              docker tag covidapp-staging:latest $AWS_ECR_STAGING:latest
              docker push $AWS_ECR_STAGING:latest
              ecs-deploy -c $AWS_CLUSTER_STAGING -n $AWS_WEB_SERVICE_STAGING -i $AWS_ECR_STAGING:latest -t $AWS_ECS_TIMEOUT -r $AWS_REGION

    deploy_heroku: &deploy_heroku
        run:
          name: Deploy
          command: |
              bash .circleci/setup-heroku.sh
              git push git@heroku.com:$HEROKU_APP_NAME.git $CIRCLE_SHA1:refs/heads/master
              heroku run python src/manage.py migrate --noinput --app $HEROKU_APP_NAME

jobs:
    test:
        <<: *container_config
        steps:
            - *restore_repo
            - checkout
            - save_cache:
                key: v1-repo-{{ .Branch }}-{{ .Revision }}
                paths:
                    - .
            - *install_python_requirements
            - *run_code_formatter
            - *run_tests
    staging:
        <<: *container_config
        steps:
            - *restore_repo
            - *install_heroku_cli
            - *deploy_heroku_staging
    aws-staging:
        <<: *container_config
        steps:
            - *restore_repo
            - <<: *create-aws-credentials
            - <<: *install-aws-cli
            - <<: *build-push-deploy-staging
    prod:
        <<: *container_config
        steps:
            - *restore_repo
            - *install_heroku_cli
            - *deploy_heroku

workflows:
    version: 2
    run_tests:
        jobs:
            - test:
                filters:
                    tags:
                        ignore: /^v.*/
    untagged-aws-build:
        jobs:
            - test:
                filters:
                    branches:
                        only: aws-staging
            - aws-staging:
                requires:
                    - test
                filters:
                    branches:
                        only: aws-staging
    untagged-build:
        jobs:
            - test:
                filters:
                    branches:
                        only: staging
            - staging:
                requires:
                    - test
                filters:
                    branches:
                        only: staging
    tagged-build:
        jobs:
            - test:
                filters:
                    tags:
                        only: /^v.*/
                    branches:
                        ignore: /.*/
            - prod:
                requires:
                    - test
                filters:
                    tags:
                        only: /^v.*/
                    branches:
                        ignore: /.*/
